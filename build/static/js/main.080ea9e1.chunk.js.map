{"version":3,"sources":["assets/images/wp.jpg","components/styled-components.js","components/config.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Nav","nav","_templateObject2","config","apiKey","spreadsheetId","options","colors","_ref","value","seriesIndex","w","plotOptions","radialBar","hollow","margin","size","track","opacity","dataLabels","showOn","name","show","stroke","lineCap","App","concat","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tableData","series","fetch","then","res","json","notionTableData","setState","_this2","react_default","a","createElement","className","src","UserImg","alt","length","map","index","Client","Subject","Agent","react_apexcharts_min_default","Progress","type","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.080ea9e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wp.e89e2840.jpg\";","import styled from \"styled-components\";\n\nexport const Container = styled.div``;\n\nexport const Nav = styled.nav``;","export default {\n    apiKey: 'AIzaSyAfiTMJvwFk7jyu9i-1f96a70iT3ZcW9s4',\n    spreadsheetId: '1xipBjrcDv68Xlig9Kxt78zv305BNQoV6URJ6QDU_U2Q',\n    options: {\n        colors: [function({ value, seriesIndex, w }) {\n          if (value > 66) {\n              return '#38e6a4'\n          } else if (value > 33) {\n              return '#febb44'\n          }\n          else{\n              return '#ff6077'\n          }\n        }],\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              margin:15,\n              size: \"10%\"\n            },\n            track:{\n              opacity:0.3\n            },\n            dataLabels: {\n              showOn: \"always\",\n              name: {\n                show: false,\n              },\n              value: {\n                show: false\n              }\n            }\n          }\n        },\n      \n        stroke: {\n          lineCap: \"butt\",\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Container, Nav } from \"./styled-components\";\n\n// fusioncharts\nimport Chart from 'react-apexcharts'\n// import \"./charts-theme\";\n\nimport config from \"./config\";\nimport UserImg from \"../assets/images/wp.jpg\";\n\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${\n  config.spreadsheetId\n}/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tableData:[],\n      options: [],\n      series: []\n    };\n  }\n\n  async componentDidMount() {\n    const notionTableData = await fetch(\n      \"https://notion-api.splitbee.io/v1/table/df4fb5a193c0420d903a19e19b594851\"\n    ).then(res => res.json());  \n    this.setState({\n      tableData: notionTableData,\n      options: config.options\n    });\n  }\n  render() {\n    return (\n      <Container>\n        {/* static navbar - top */}\n        <Nav className=\"navbar navbar-expand-lg fixed-top is-white is-dark-text\">\n          <Container className=\"navbar-brand h1 mb-0 text-large font-medium\">\n            Workpal Implementation Dashboard\n          </Container>\n          <Container className=\"navbar-nav ml-auto\">\n            <Container className=\"user-detail-section\">\n              <span className=\"img-container\">\n                <img src={UserImg} className=\"rounded-circle\" alt=\"user\" />\n              </span>\n            </Container>\n          </Container>\n        </Nav>\n\n        {/* content area start */}\n        <Container className=\"container-fluid pr-5 pl-5 pt-5 pb-5\">\n          {/* row 1 - revenue */}\n          <Container className=\"row\">\n            <Container className=\"col-lg-3 col-sm-6 is-light-text mb-4\">\n              <Container className=\"card grid-card is-card-dark\">\n                <Container className=\"card-heading\">\n                  <Container className=\"is-dark-text-light letter-spacing text-small\">\n                    Calls this week\n                  </Container>\n                </Container>\n\n                <Container className=\"card-value pt-4 text-x-large\">\n                  {this.state.tableData.length}\n                  <span className=\"text-medium pl-2 is-dark-text-light\">\n                    calls\n                  </span>\n                </Container>\n              </Container>\n            </Container>\n\n            <Container className=\"col-md-8 col-lg-9 is-light-text mb-4\">\n              <Container className=\"card is-card-dark chart-card\">\n                <Container className=\"row full-height\">\n                \n                      <table className=\"table\">\n                        <thead>\n                          <tr className=\"is-dark-text-light letter-spacing text-small\">\n                            <th>Client</th>\n                            <th>Subject</th>\n                            <th>Agent</th>\n                            <th>Progress</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            this.state.tableData.map((call,index) => {\n                              return (\n                                <tr >\n                                  <td>{call.Client}</td>\n                                  <td>{call.Subject}</td>\n                                  <td>{call.Agent}</td>\n                                  <td>\n                                    <div >\n                                      <Chart\n                                        options={this.state.options}\n                                        series={[call.Progress]}\n                                        type=\"radialBar\"\n                                        height=\"100px\"\n                                        width=\"100px\"\n                                      />\n                                    </div>\n                                  </td>\n                                </tr>\n                              )\n                            })\n                          }\n                        </tbody>\n                      </table>\n                      {/* <Table data={this.state.items}/> */}\n                </Container>\n              </Container>\n            </Container>\n        </Container>\n      </Container>\n    </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-dropdown/style.css';\nimport './style.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport '@fortawesome/fontawesome-free/css/all.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}